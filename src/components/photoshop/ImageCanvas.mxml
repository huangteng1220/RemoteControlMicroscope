<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:local="*"
		   xmlns:display="components.photoshop.display.*"
		   width="500" height="500" >
	
	<fx:Metadata>
		[Event(name="undoComplete", type="flash.events.Event")]
		[Event(name="selectComplete", type="flash.events.Event")]
		[Event(name="colorPicked", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.resources.ResourceBundle;
			
			public var saved:Boolean = true; // if current image is saved after modification
			
			private var abmd:Array = []; // BitmapData stack for undoing modification
			private var index:int = 0; // BitmapData stack pointer
			
			[Bindable]
			private var previewing:Boolean = false; // if canvas widgit is showing a preview
			
			// load image and reset everything
			public function loadImage(bitmapData:BitmapData):void {
				stopPreview();
				stopSelect();
				stopRotate();
				stopSmooth();
				stopColorPicker();
				
				canvas.bitmapData = bitmapData;
				abmd = [bitmapData];
				index = 0;
				
				var values:Array = [0.15, 0.25, 0.5, 0.75, 1];
				var i:int;
				for (i = 4; i > 0; i--)
					if (values[i] * bitmapData.width < canvas.width && values[i] * bitmapData.height < canvas.height) break;
				zoom.enabled = true;
				zoom.value = i;
				changeZoom();
				
				undo.enabled = false;
				redo.enabled = false;
				saved = true;
			}
			
			// set image data
			public function set bitmapData(bitmapData:BitmapData):void {
				if (previewing) abmd[index] = bitmapData;
				else {
					abmd.splice(index + 1);
					index += 1;
					abmd.push(bitmapData);
				}
				canvas.bitmapData = bitmapData;
				undo.enabled = true;
				redo.enabled = false;
				saved = false;
			}
			
			// get image data
			public function get bitmapData():BitmapData {
				return abmd[index];
			}
			
			// change zoom level according to zoom.value
			private function changeZoom():void {
				var values:Array = [15, 25, 50, 75, 100, 125, 150, 175, 200];
				var z:Number = values[zoom.value];
				zoomText.text = z + "%";
				canvas.scale = z / 100;
			}
			
			// start preview mode
			public function startPreview():void {
				bitmapData = abmd[index];
				previewing = true;
			}
			
			// stop preview mode
			public function stopPreview():void {
				previewing = false;
			}
			
			// cancel current process if under preview mode
			public function cancelPreview():void {
				if (!previewing) return;
				stopPreview();
				index -= 1;
				abmd.pop();
				canvas.bitmapData = abmd[index];
				if (index == 0) undo.enabled = false;
				redo.enabled = false;
			}
			
			// undo current process, moving BitmapData stack pointer
			private function clickUndo():void {
				if (canvas.layers.smoothing) doneSmooth();
				index -= 1;
				canvas.bitmapData = abmd[index];
				previewing = false;
				if (canvas.layers.selecting) canvas.layers.resetSelection();
				if (index == 0) undo.enabled = false;
				redo.enabled = true;
				saved = false;
				dispatchEvent(new Event("undoComplete"));
			}

			// redo current process, moving BitmapData stack pointer
			private function clickRedo():void {
				index += 1;
				canvas.bitmapData = abmd[index];
				if (canvas.layers.selecting) canvas.layers.resetSelection();
				undo.enabled = true;
				if (index == abmd.length - 1) redo.enabled = false;
				saved = false;
			}
			
			// (event handler) mouse over image, should show the image before current process if under preview mode
			private function mouseOverPreview():void {
				if (previewing) {
					preview.label = resourceManager.getString('locale', 'canvas_original');
					canvas.bitmapData = abmd[index - 1];
					if (canvas.layers.smoothing) canvas.layers.smoothVisible = false;
				}
			}
			
			// (event handler) mouse out image, should show the preview if under preview mode
			private function mouseOutPreview():void {
				if (previewing) {
					preview.label = resourceManager.getString('locale', 'canvas_preview');
					canvas.bitmapData = abmd[index];
					if (canvas.layers.smoothing) canvas.layers.smoothVisible = true;
				}
			}
			
			// start area selecting mode
			public function startSelect():void {
				canvas.layers.selecting = true;
				canvas.draggable = false;
			}
			
			// stop area selecting mode
			public function stopSelect():void {
				canvas.layers.selecting = false;
				canvas.draggable = true;
			}
			
			// set image aspect
			public function set proportion(p:Number):void {
				canvas.layers.proportion = p;
			}
			
			// start rotating mode
			public function startRotate():void {
				canvas.layers.rotating = true;
			}
			
			// stop rotating mode
			public function stopRotate():void {
				canvas.layers.rotating = false;
			}
			
			// start skin smoothing mode
			public function startSmooth():void {
				canvas.layers.smoothing = true;
				canvas.draggable = false;
			}
			
			// stop skin smoothing mode
			public function stopSmooth():void {
				canvas.layers.smoothing = false;
				canvas.draggable = true;
			}
			
			// skin smoothing done
			public function doneSmooth():void {
				var bmd:BitmapData = abmd[index].clone();
				var m:Matrix = canvas.layers.offsetMatrix.clone();
				m.invert();
				bmd.draw(canvas.layers.smoothLayer, m);
				bitmapData = bmd;
			}
			
			// start color picking mode
			public function startColorPicker():void {
				canvas.layers.colorPicking = true;
				canvas.draggable = false;
			}
			
			// stop color picking mode
			public function stopColorPicker():void {
				canvas.layers.colorPicking = false;
				canvas.draggable = true;
			}
		]]>
	</fx:Script>
	
	<mx:VBox left="10" right="10" top="10" bottom="10">
		<mx:ControlBar width="100%" horizontalAlign="center">
			<mx:Button id="preview" width="81" label="@Resource(bundle='locale', key='canvas_preview')"
					   enabled="{previewing}" mouseOut="mouseOutPreview();"
					   mouseOver="mouseOverPreview();"/>
			<mx:Button id="undo" label="@Resource(bundle='locale', key='canvas_undo')" click="clickUndo()" enabled="false"/>
			<mx:Button id="redo" label="@Resource(bundle='locale', key='canvas_redo')" click="clickRedo()" enabled="false"/>
			<mx:Spacer width="50"/>
			<mx:Label text="@Resource(bundle='locale', key='canvas_zoom')" textAlign="right"/>
			<mx:HSlider id="zoom" change="changeZoom()" enabled="false" liveDragging="true"
						maximum="8" minimum="0" showDataTip="false" snapInterval="1" value="4"/>
			<mx:Label id="zoomText" width="50" text="100%"/>
		</mx:ControlBar>
		<display:DraggableCanvas id="canvas" width="100%" height="100%"/>
	</mx:VBox>
</mx:Canvas>
