<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:components="components.*"
					label="视频发布列表" creationComplete="creationCompleteHandler(event)">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.smartfoxserver.v2.redbox.data.LiveCast;
			
			import mx.events.FlexEvent;
			internal function get main():SimpleChat
			{
				return parentApplication as SimpleChat;
			}
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				
				RetrieveAndPublishLiveCast();
			}
			private function RetrieveAndPublishLiveCast():void{
				// Retrieve live casts already available
				for each (var liveCast:LiveCast in main.avCastMan.getAvailableCasts())
				{
					// Subscribe live cast and add to video container
					addLiveCast(liveCast);
				}
				
				// Publish my live cast
				try
				{
					var myStream:NetStream = main.avCastMan.publishLiveCast(true, true);
					
					if (myStream != null)
					{
						// Attach camera output 
						myVCItem.attachCamera(Camera.getCamera());
						

					}
				}
				catch (e:Error)
				{
					var error:String = "The following error occurred while trying to subscribe a live cast: " + e.message;
					
					// Show alert
					//showAlert(error);
				}
			}
			/**
			 * Add live cast to video container
			 */
			public function addLiveCast(liveCast:LiveCast):void
			{
				// Subscribe cast
				var stream:NetStream = main.avCastMan.subscribeLiveCast(liveCast.id);
				
				if (stream != null)
				{
					// Add item to video container
					var item:VideoConferenceItem = new VideoConferenceItem();
					item.name = "user_" + liveCast.userId;
					
					videoContainer.addChild(item);
					
					// Attach stream to item
					item.setLabelText(liveCast.username);
					item.attachStream(stream);
				}
			}
			
			public function releaseLiveCast():void{
				// Retrieve live casts
				for each (var liveCast:LiveCast in main.avCastMan.getAvailableCasts())
				{
					// Remove item from video container
					videoContainer.removeChild(videoContainer.getChildByName("user_" + liveCast.userId));
				}
				
				// Stop camera output
				myVCItem.reset(main.sfs.mySelf.name + " (me)");
			}
		]]>
	</fx:Script>
	<mx:Tile width="100%" id="videoContainer" horizontalScrollPolicy="off" verticalScrollPolicy="auto" direction="horizontal">
		<components:VideoConferenceItem id="myVCItem" />
	</mx:Tile>
</s:NavigatorContent>
